/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DecentralizedExchangeGUI.java
 *
 * Created on 20.03.2015, 21:34:20
 */
package de.bitcrystal.decentralizedexchange;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ABC
 */
public class DecentralizedExchangeGUI extends javax.swing.JFrame {

    private static String currentTradeAddressS;
    private static String currentTradeWithAddressS;
    private static boolean isInit = false;
    private static boolean processProcessed = false;
    private static boolean canSetTradeWithAddress = true;
    private static boolean startTrade = false;
    private static boolean updateBalance = false;
    private static long timestamp;

    /** Creates new form DecentralizedExchangeGUI */
    public DecentralizedExchangeGUI() {
        initComponents();
        StartTradeBuyBtcSellBitcrystal.setEnabled(false);
        startTradeBuyBtcrySellBtc.setEnabled(false);
        bitcoinBalanceLabel.setEnabled(false);
        bitcrystalBalanceLabel.setEnabled(false);
        bitcoinBalance.setEnabled(false);
        bitcrystalBalance.setEnabled(false);
        depositAddressForBitcoinsLabel.setEnabled(false);
        depositAddressForBitcrystal.setEnabled(false);
        depositAddressBitcoins.setEnabled(false);
        depositAddressBitcrystal.setEnabled(false);
        balanceUpdater();
        currentTradeAddressUpdater();
        initUpdater();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jFrame1 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        currentTradeAddress = new javax.swing.JTextField();
        currentTradeWithAddress = new javax.swing.JTextField();
        getNewCurrentTradeAddressButton = new javax.swing.JButton();
        currentTradeWithAddressButton = new javax.swing.JButton();
        depositAddressForBitcoinsLabel = new javax.swing.JLabel();
        depositAddressForBitcrystal = new javax.swing.JLabel();
        depositAddressBitcoins = new javax.swing.JTextField();
        depositAddressBitcrystal = new javax.swing.JTextField();
        bitcoinBalanceLabel = new javax.swing.JLabel();
        bitcrystalBalanceLabel = new javax.swing.JLabel();
        bitcoinBalance = new javax.swing.JTextField();
        bitcrystalBalance = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        buyBitcrystal = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        sellBitcoin = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        startTradeBuyBtcrySellBtc = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        buyBitcoin = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        sellBitcrystal = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        StartTradeBuyBtcSellBitcrystal = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Decentralized Exchange v0.1 by BitCrystal Developers");

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(800, 800));

        jLabel2.setText("CurrentTradeAddress");
        jLabel2.setName(""); // NOI18N

        jLabel3.setText("CurrentTradeWithAddress");

        currentTradeAddress.setEditable(false);
        currentTradeAddress.setName(""); // NOI18N

        currentTradeWithAddress.setText("Enter here the partner address");

        getNewCurrentTradeAddressButton.setText("Get Current Trade Address");
        getNewCurrentTradeAddressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getNewCurrentTradeAddressButtonActionPerformed(evt);
            }
        });

        currentTradeWithAddressButton.setText("Set Current Trade With Address");
        currentTradeWithAddressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentTradeWithAddressButtonActionPerformed(evt);
            }
        });

        depositAddressForBitcoinsLabel.setText("Deposit Address For Bitcoins");

        depositAddressForBitcrystal.setText("Deposit Address For Bitcrystal");

        depositAddressBitcoins.setEditable(false);

        depositAddressBitcrystal.setEditable(false);

        bitcoinBalanceLabel.setText("Bitcoin Balance");

        bitcrystalBalanceLabel.setText("Bitcrystal Balance");

        bitcoinBalance.setEditable(false);
        bitcoinBalance.setText("0.0");
        bitcoinBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bitcoinBalanceActionPerformed(evt);
            }
        });
        bitcoinBalance.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bitcoinBalanceFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                bitcoinBalanceFocusLost(evt);
            }
        });

        bitcrystalBalance.setEditable(false);
        bitcrystalBalance.setText("0.0");
        bitcrystalBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bitcrystalBalanceActionPerformed(evt);
            }
        });
        bitcrystalBalance.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bitcrystalBalanceFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                bitcrystalBalanceFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(depositAddressForBitcoinsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(currentTradeAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(getNewCurrentTradeAddressButton, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(bitcoinBalanceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(depositAddressBitcoins, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(bitcoinBalance, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(currentTradeWithAddress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                    .addComponent(currentTradeWithAddressButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                    .addComponent(depositAddressForBitcrystal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                    .addComponent(depositAddressBitcrystal, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                    .addComponent(bitcrystalBalance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                    .addComponent(bitcrystalBalanceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentTradeAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentTradeWithAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getNewCurrentTradeAddressButton)
                    .addComponent(currentTradeWithAddressButton))
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositAddressForBitcoinsLabel)
                    .addComponent(depositAddressForBitcrystal))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(depositAddressBitcrystal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(depositAddressBitcoins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bitcoinBalanceLabel)
                    .addComponent(bitcrystalBalanceLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bitcrystalBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bitcoinBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(167, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Main", jPanel2);

        jLabel4.setText("Trade BitCrystal / Bitcoin");

        buyBitcrystal.setText("Enter here the money...");

        jLabel6.setText("Buy");

        jLabel7.setText("BTCRY");

        jLabel8.setText("Sell");

        sellBitcoin.setText("Enter here the money...");

        jLabel9.setText("BTC");

        startTradeBuyBtcrySellBtc.setText("Start Trade");
        startTradeBuyBtcrySellBtc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTradeBuyBtcrySellBtcActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(startTradeBuyBtcrySellBtc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sellBitcoin)
                                    .addComponent(buyBitcrystal, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel7))))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(43, 43, 43)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyBitcrystal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(sellBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addComponent(startTradeBuyBtcrySellBtc)
                .addContainerGap(316, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("BTCRY/BTC", jPanel3);

        jLabel10.setText("Trade Bitcoin / BitCrystal");

        jLabel11.setText("Buy");

        buyBitcoin.setText("Enter here the money...");
        buyBitcoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyBitcoinActionPerformed(evt);
            }
        });

        jLabel12.setText("BTC");

        sellBitcrystal.setText("Enter here the money...");

        jLabel13.setText("BTCRY");

        jLabel14.setText("Sell");

        StartTradeBuyBtcSellBitcrystal.setText("Start Trade");
        StartTradeBuyBtcSellBitcrystal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartTradeBuyBtcSellBitcrystalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(StartTradeBuyBtcSellBitcrystal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel14))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sellBitcrystal)
                                    .addComponent(buyBitcoin, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13))))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addGap(41, 41, 41)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(buyBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sellBitcrystal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(StartTradeBuyBtcSellBitcrystal)
                .addContainerGap(326, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("BTC/BTCRY", jPanel4);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bitcrystal/decentralizedexchange/dex.png"))); // NOI18N

        jLabel16.setText("@ copyright 2015 by the BitCrystal Developers Team");

        jLabel17.setText("FUCK SOPA ! FUCK ACTA ! Nobody takes our freedom!");

        jLabel18.setText("@ BitCrystal Team We do everything for the freedom! Many fun with this exchange! ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(164, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                        .addGap(176, 176, 176))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                        .addGap(166, 166, 166))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel15)
                .addGap(59, 59, 59)
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addGap(22, 22, 22)
                .addComponent(jLabel16)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("About", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleParent(jTabbedPane1);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel5.setText("Decentralized Exchange v0.1 by the BitCrystal Developers Team");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void StartTradeBuyBtcSellBitcrystalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartTradeBuyBtcSellBitcrystalActionPerformed
    new NotInterruptableThread(new Runnable() {

        public void run() {
            if (startTrade == true) {
                JOptionPane.showMessageDialog(null, "You have start already a trade!");
                JOptionPane.showMessageDialog(null, getWaitMessage());
                return;
            }
            setDiff(150);
            startTrade = true;
            String buyBitcoinText = buyBitcoin.getText();
            String sellBitcrystalText = sellBitcrystal.getText();
            double buyBitcoinDouble = -1;
            double sellBitcrystalDouble = -1;
            try {
                buyBitcoinDouble = Double.parseDouble(buyBitcoinText);
                sellBitcrystalDouble = Double.parseDouble(sellBitcrystalText);
            } catch (Exception ex) {
                buyBitcoinDouble = -1;
                sellBitcrystalDouble = -1;
            }
            if (buyBitcoinDouble <= 0 || sellBitcrystalDouble <= 0) {
                JOptionPane.showMessageDialog(null, "Not valid numbers!");
                startTrade = false;
                return;
            }
            double btc = ClientConnection.getBitcoinBalanceTradeAccount();
            double btcry = ClientConnection.getBitcrystalBalanceTradeAccount();
            if (btc <= 0 || btcry <= 0) {
                JOptionPane.showMessageDialog(null, "You have not enough balance!");
                startTrade = false;
                return;
            }
            if (btcry < sellBitcrystalDouble || btc < buyBitcoinDouble) {
                startTrade = false;
                JOptionPane.showMessageDialog(null, "You cannot start the trade, have you enough balance?");
                return;
            }
            int ret = JOptionPane.showConfirmDialog(null, "Start the trade? You can not stop the trade if the trade is started!", "Question", JOptionPane.YES_NO_OPTION);
            if (ret == JOptionPane.NO_OPTION) {
                startTrade = false;
                JOptionPane.showMessageDialog(null, "Trade is aborted!");
                return;
            } else {
                JOptionPane.showMessageDialog(null, "Trade is started! Please be patient okay!");
            }
            DecentralizedExchange.command("createtradebtcry2btc " + buyBitcoinDouble + " " + sellBitcrystalDouble);
            if (!ClientConnection.getLastCommandStatus()) {
                startTrade = false;
                JOptionPane.showMessageDialog(null, "Trade can not be created, Trade is aborted!");
                return;
            }
            DecentralizedExchange.command("synctrade");
            if (!ClientConnection.getLastCommandStatus()) {
                startTrade = false;
                JOptionPane.showMessageDialog(null, "Trade can not be synced, Trade is aborted!");
                return;
            }
            JOptionPane.showMessageDialog(null, "All Cool! Make sure that your partner with you trade also has the same message as you.");
            boolean lastStatus = false;
            for (int i = 0; i < 5; i++) {
                DecentralizedExchange.command("starttrade");
                lastStatus = ClientConnection.getLastCommandStatus();
                if (!lastStatus) {
                    JOptionPane.showMessageDialog(null, "Trade can not be started. Have your partner also the message All Cool!...? Try again!");
                } else {
                    break;
                }
            }
            if (!lastStatus) {
                JOptionPane.showMessageDialog(null, "Trade can not be started, Trade is aborted!");
                startTrade = false;
                return;
            }
            JOptionPane.showMessageDialog(null, "All Overcool! Make sure that your partner with you trade also has the same message as you.");
            lastStatus = false;
            for (int i = 0; i < 5; i++) {
                DecentralizedExchange.command("endtrademe");
                lastStatus = ClientConnection.getLastCommandStatus();
                if (!lastStatus) {
                    JOptionPane.showMessageDialog(null, "Trade can not be ended. Have your partner also the message All Overcool!...? Try again!");
                } else {
                    break;
                }
            }
            if (!lastStatus) {
                JOptionPane.showMessageDialog(null, "Trade can not be ended, Trade is aborted!");
                startTrade = false;
                return;
            }
            JOptionPane.showMessageDialog(null, "All Good! Make sure that your partner with you trade also has the same message as you.");
            lastStatus = false;
            for (int i = 0; i < 5; i++) {
                DecentralizedExchange.command("endtradeother");
                lastStatus = ClientConnection.getLastCommandStatus();
                if (!lastStatus) {
                    JOptionPane.showMessageDialog(null, "Trade from the other user can not be ended. Have your partner also the message All Good!...? Try again!");
                } else {
                    break;
                }
            }
            if (!lastStatus) {
                JOptionPane.showMessageDialog(null, "Trade can not be ended, Trade is aborted!");
                startTrade = false;
                return;
            }
            JOptionPane.showMessageDialog(null, "All Perfect! Make sure that your partner with you trade also has the same message as you.");
            JOptionPane.showMessageDialog(null, "Click ok to finish the trade!");
            lastStatus = false;
            for (int i = 0; i < 5; i++) {
                DecentralizedExchange.command("endtrade");
                lastStatus = ClientConnection.getLastCommandStatus();
                if (!lastStatus) {
                    JOptionPane.showMessageDialog(null, "Trade can not be ended. Have your partner also the message All Perfect!...? Try again!");
                } else {
                    break;
                }
            }
            if (!lastStatus) {
                JOptionPane.showMessageDialog(null, "Trade can not be ended, Trade is aborted!");
                startTrade = false;
                return;
            }
            startTrade = false;
            JOptionPane.showMessageDialog(null, "Trade is successfully ended!");
        }
    }).start();
}//GEN-LAST:event_StartTradeBuyBtcSellBitcrystalActionPerformed

private void buyBitcoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyBitcoinActionPerformed

}//GEN-LAST:event_buyBitcoinActionPerformed

private void startTradeBuyBtcrySellBtcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTradeBuyBtcrySellBtcActionPerformed
    new NotInterruptableThread(new Runnable() {

        public void run() {
            if (startTrade == true) {
                JOptionPane.showMessageDialog(null, "You have start already a trade!");
                JOptionPane.showMessageDialog(null, getWaitMessage());
                return;
            }
            setDiff(150);
            startTrade = true;
            String buyBitcrystalText = buyBitcrystal.getText();
            String sellBitcoinText = sellBitcoin.getText();
            double buyBitcrystalDouble = -1;
            double sellBitcoinDouble = -1;
            try {
                buyBitcrystalDouble = Double.parseDouble(buyBitcrystalText);
                sellBitcoinDouble = Double.parseDouble(sellBitcoinText);
            } catch (Exception ex) {
                buyBitcrystalDouble = -1;
                sellBitcoinDouble = -1;
            }
            if (buyBitcrystalDouble <= 0 || sellBitcoinDouble <= 0) {
                JOptionPane.showMessageDialog(null, "Not valid numbers!");
                startTrade = false;
                return;
            }
            double btc = ClientConnection.getBitcoinBalanceTradeAccount();
            double btcry = ClientConnection.getBitcrystalBalanceTradeAccount();
            if (btc <= 0 || btcry <= 0) {
                JOptionPane.showMessageDialog(null, "You have not enough balance!");
                startTrade = false;
                return;
            }
            if (btcry < buyBitcrystalDouble || btc < sellBitcoinDouble) {
                JOptionPane.showMessageDialog(null, "You cannot start the trade, have you enough balance?");
                startTrade = false;
                return;
            }
            int ret = JOptionPane.showConfirmDialog(null, "Start the trade? You can not stop the trade if the trade is started!", "Question", JOptionPane.YES_NO_OPTION);
            if (ret == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, "Trade is aborted!");
                startTrade = false;
                return;
            } else {
                JOptionPane.showMessageDialog(null, "Trade is started! Please be patient okay!");
            }
            DecentralizedExchange.command("createtradebtc2btcry " + buyBitcrystalDouble + " " + sellBitcoinDouble);
            if (!ClientConnection.getLastCommandStatus()) {
                JOptionPane.showMessageDialog(null, "Trade can not be created, Trade is aborted!");
                startTrade = false;
                return;
            }
            DecentralizedExchange.command("synctrade");
            if (!ClientConnection.getLastCommandStatus()) {
                startTrade = false;
                JOptionPane.showMessageDialog(null, "Trade can not be synced, Trade is aborted!");
                return;
            }
            JOptionPane.showMessageDialog(null, "All Cool! Make sure that your partner with you trade also has the same message as you.");
            boolean lastStatus = false;
            for (int i = 0; i < 5; i++) {
                DecentralizedExchange.command("starttrade");
                lastStatus = ClientConnection.getLastCommandStatus();
                if (!lastStatus) {
                    JOptionPane.showMessageDialog(null, "Trade can not be started. Have your partner also the message All Cool!...? Try again!");
                } else {
                    break;
                }
            }
            if (!lastStatus) {
                JOptionPane.showMessageDialog(null, "Trade can not be started, Trade is aborted!");
                startTrade = false;
                return;
            }
            JOptionPane.showMessageDialog(null, "All Overcool! Make sure that your partner with you trade also has the same message as you.");
            lastStatus = false;
            for (int i = 0; i < 5; i++) {
                DecentralizedExchange.command("endtrademe");
                lastStatus = ClientConnection.getLastCommandStatus();
                if (!lastStatus) {
                    JOptionPane.showMessageDialog(null, "Trade can not be ended. Have your partner also the message All Overcool!...? Try again!");
                } else {
                    break;
                }
            }
            if (!lastStatus) {
                JOptionPane.showMessageDialog(null, "Trade can not be ended, Trade is aborted!");
                startTrade = false;
                return;
            }
            JOptionPane.showMessageDialog(null, "All Good! Make sure that your partner with you trade also has the same message as you.");
            lastStatus = false;
            for (int i = 0; i < 5; i++) {
                DecentralizedExchange.command("endtradeother");
                lastStatus = ClientConnection.getLastCommandStatus();
                if (!lastStatus) {
                    JOptionPane.showMessageDialog(null, "Trade from the other user can not be ended. Have your partner also the message All Good!...? Try again!");
                } else {
                    break;
                }
            }
            if (!lastStatus) {
                JOptionPane.showMessageDialog(null, "Trade can not be ended, Trade is aborted!");
                startTrade = false;
                return;
            }
            JOptionPane.showMessageDialog(null, "All Perfect! Make sure that your partner with you trade also has the same message as you.");
            JOptionPane.showMessageDialog(null, "Click ok to finish the trade!");
            lastStatus = false;
            for (int i = 0; i < 5; i++) {
                DecentralizedExchange.command("endtrade");
                lastStatus = ClientConnection.getLastCommandStatus();
                if (!lastStatus) {
                    JOptionPane.showMessageDialog(null, "Trade can not be ended. Have your partner also the message All Perfect!...? Try again!");
                } else {
                    break;
                }
            }
            if (!lastStatus) {
                JOptionPane.showMessageDialog(null, "Trade can not be ended, Trade is aborted!");
                startTrade = false;
                return;
            }
            startTrade = false;
            JOptionPane.showMessageDialog(null, "Trade is successfully ended!");
        }
    }).start();
}//GEN-LAST:event_startTradeBuyBtcrySellBtcActionPerformed

private void bitcrystalBalanceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bitcrystalBalanceFocusLost
    double balance = ClientConnection.getBitcrystalBalanceTradeAccount();
    if (balance <= 0) {
        balance = 0;
    }
    bitcrystalBalance.setText("" + balance);
}//GEN-LAST:event_bitcrystalBalanceFocusLost

private void bitcrystalBalanceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bitcrystalBalanceFocusGained
    double balance = ClientConnection.getBitcrystalBalanceTradeAccount();
    if (balance <= 0) {
        balance = 0;
    }
    bitcrystalBalance.setText("" + balance);
}//GEN-LAST:event_bitcrystalBalanceFocusGained

private void bitcrystalBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bitcrystalBalanceActionPerformed
    double balance = ClientConnection.getBitcrystalBalanceTradeAccount();
    if (balance <= 0) {
        balance = 0;
    }
    bitcrystalBalance.setText("" + balance);
}//GEN-LAST:event_bitcrystalBalanceActionPerformed

private void bitcoinBalanceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bitcoinBalanceFocusLost
    double balance = ClientConnection.getBitcoinBalanceTradeAccount();
    if (balance <= 0) {
        balance = 0;
    }
    bitcoinBalance.setText("" + balance);
}//GEN-LAST:event_bitcoinBalanceFocusLost

private void bitcoinBalanceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bitcoinBalanceFocusGained
    double balance = ClientConnection.getBitcoinBalanceTradeAccount();
    if (balance <= 0) {
        balance = 0;
    }
    bitcoinBalance.setText("" + balance);
}//GEN-LAST:event_bitcoinBalanceFocusGained

private void bitcoinBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bitcoinBalanceActionPerformed
    double balance = ClientConnection.getBitcoinBalanceTradeAccount();
    if (balance <= 0) {
        balance = 0;
    }
    bitcoinBalance.setText("" + balance);
}//GEN-LAST:event_bitcoinBalanceActionPerformed

private void currentTradeWithAddressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentTradeWithAddressButtonActionPerformed

    if (!isInit) {
        JOptionPane.showMessageDialog(null, "The Decentralized Exchange Server is not initialized. Please wait a minute or two!");
        JOptionPane.showMessageDialog(null, getWaitMessage());
        return;
    }
    if (processProcessed) {
        JOptionPane.showMessageDialog(null, "The Process is working! Please be patient!");
        JOptionPane.showMessageDialog(null, getWaitMessage());
        return;
    }
    if (!canSetTradeWithAddress) {
        JOptionPane.showMessageDialog(null, "In order to change the current trade with address you must restart the client!");
        return;
    }

    JOptionPane.showMessageDialog(null, "The Process takes a while! Please wait a minute or two!");
    new NotInterruptableThread(new Runnable() {

        public void run() {
            processProcessed = true;
            setDiff(300);

            currentTradeWithAddressS = currentTradeWithAddress.getText();
            DecentralizedExchange.command("tradewith " + currentTradeWithAddressS);
            if (ClientConnection.getLastCommandStatus()) {
                currentTradeWithAddress.setEditable(false);
                currentTradeWithAddressS = ClientConnection.getCurrentTradeWithAddress();
                currentTradeWithAddress.setText(currentTradeWithAddressS);
                canSetTradeWithAddress = false;
                processProcessed = false;
                bitcoinBalance.setEnabled(true);
                bitcrystalBalance.setEnabled(true);
                bitcoinBalanceLabel.setEnabled(true);
                bitcrystalBalanceLabel.setEnabled(true);
                depositAddressForBitcoinsLabel.setEnabled(true);
                depositAddressForBitcrystal.setEnabled(true);
                depositAddressBitcoins.setEnabled(true);
                depositAddressBitcrystal.setEnabled(true);
                StartTradeBuyBtcSellBitcrystal.setEnabled(true);
                startTradeBuyBtcrySellBtc.setEnabled(true);
                String tradeAccountMultisigAddressForBitcoin = ClientConnection.getTradeAccountMultisigAddressForBitcoin();
                String tradeAccountMultisigAddressForBitcrystal = ClientConnection.getTradeAccountMultisigAddressForBitcrystal();
                depositAddressBitcoins.setText(tradeAccountMultisigAddressForBitcoin);
                depositAddressBitcrystal.setText(tradeAccountMultisigAddressForBitcrystal);
                updateBalance = true;
                JOptionPane.showMessageDialog(null, "Successfully setted the current trade with address to " + currentTradeWithAddressS + "!");
            } else {
                processProcessed = false;
                JOptionPane.showMessageDialog(null, "Error ! The Address is not contains in the database of the node server!");
                return;
            }
        }
    }).start();

}//GEN-LAST:event_currentTradeWithAddressButtonActionPerformed

private void getNewCurrentTradeAddressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getNewCurrentTradeAddressButtonActionPerformed
    if (!isInit) {
        JOptionPane.showMessageDialog(null, "The Decentralized Exchange Server is not initialized. Please wait a minute or two!");
        JOptionPane.showMessageDialog(null, getWaitMessage());
        return;
    }
    if (currentTradeAddressS == null || currentTradeAddressS.isEmpty()) {
        currentTradeAddressS = ClientConnection.getCurrentTradeAddress();
    }
    currentTradeAddress.setText(currentTradeAddressS);
}//GEN-LAST:event_getNewCurrentTradeAddressButtonActionPerformed
    private static String commandParser(String command) {
        String ret = "";
        try {
            ret = new String(command.getBytes("UTF-8"), "UTF-8");
        } catch (Exception ex) {
            ret = "";
        }
        return ret;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DecentralizedExchangeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DecentralizedExchangeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DecentralizedExchangeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DecentralizedExchangeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new NotInterruptableThread(
                        new Runnable() {

                            public void run() {
                                new DecentralizedExchangeGUI().setVisible(true);
                                setDiff(150);
                                DecentralizedExchange.start();
                                new File("client.properties").delete();
                                try {
                                    DecentralizedExchange.command("tradeabort");
                                    DecentralizedExchange.command("add");
                                    isInit = true;
                                } catch (Exception ex) {
                                    JOptionPane.showMessageDialog(null, "Cannot connect to the node server please change the node.properties and restart the client!");
                                    System.exit(0);
                                    return;
                                }
                            }
                        }).start();
            }
        });
    }

    private void balanceUpdater() {
        new NotInterruptableDaemonThread(new Runnable() {

            public void run() {
                while (true) {
                    if (updateBalance) {
                        double bitcoinBalanceTradeAccount = ClientConnection.getBitcoinBalanceTradeAccount();
                        double bitcrystalBalanceTradeAccount = ClientConnection.getBitcrystalBalanceTradeAccount();
                        if (bitcoinBalanceTradeAccount <= 0) {
                            bitcoinBalanceTradeAccount = 0.0;
                        }
                        if (bitcrystalBalanceTradeAccount <= 0) {
                            bitcrystalBalanceTradeAccount = 0.0;
                        }
                        bitcoinBalance.setText("" + bitcoinBalanceTradeAccount);
                        bitcrystalBalance.setText("" + bitcrystalBalanceTradeAccount);
                    }
                }
            }
        }).start();
    }

    private void currentTradeAddressUpdater() {
        new NotInterruptableDaemonThread(new Runnable() {

            public void run() {
                while (currentTradeAddressS == null || currentTradeAddressS.isEmpty()) {
                    currentTradeAddressS = ClientConnection.getCurrentTradeAddress();
                }
                currentTradeAddress.setText(currentTradeAddressS);
            }
        }).start();
    }
    
     private void initUpdater() {
        new NotInterruptableDaemonThread(new Runnable() {

            public void run() {
                JOptionPane.showMessageDialog(null, "Decentralized Exchange Server is initialized... Please wait its take a while so estimated 150 seconds!");
                while (isInit==false) {
                }
                 JOptionPane.showMessageDialog(null, "Decentralized Exchange Server successfully initialized!");
            }
        }).start();
    }
    
    private static long getDiff()
    {
        return timestamp-System.currentTimeMillis();
    }
    
    private static void setDiff(long seconds)
    {
        timestamp=System.currentTimeMillis()+seconds*1000;
    }
    
    private static String getWaitMessage()
    {
        long seconds=getDiff();
        seconds=seconds/1000;
        if(seconds<=0)
            seconds=0;
        return "You must to wait estimated " + seconds + " seconds!";
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton StartTradeBuyBtcSellBitcrystal;
    private javax.swing.JTextField bitcoinBalance;
    private javax.swing.JLabel bitcoinBalanceLabel;
    private javax.swing.JTextField bitcrystalBalance;
    private javax.swing.JLabel bitcrystalBalanceLabel;
    private javax.swing.JTextField buyBitcoin;
    private javax.swing.JTextField buyBitcrystal;
    private javax.swing.JTextField currentTradeAddress;
    private javax.swing.JTextField currentTradeWithAddress;
    private javax.swing.JButton currentTradeWithAddressButton;
    private javax.swing.JTextField depositAddressBitcoins;
    private javax.swing.JTextField depositAddressBitcrystal;
    private javax.swing.JLabel depositAddressForBitcoinsLabel;
    private javax.swing.JLabel depositAddressForBitcrystal;
    private javax.swing.JButton getNewCurrentTradeAddressButton;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField sellBitcoin;
    private javax.swing.JTextField sellBitcrystal;
    private javax.swing.JButton startTradeBuyBtcrySellBtc;
    // End of variables declaration//GEN-END:variables
}
